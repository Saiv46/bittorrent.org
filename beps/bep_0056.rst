:BEP: 56
:Title: Extension for Peers to Send Metadata Files
:Version: $Revision$
:Last-Modified: $Date$
:Author:  Alexander Ivanov <saiv46@yandex.ru>
:Status:  Draft
:Type:    Standards Track
:Created: 31-Sep-2021
:Post-History: 

Abstract
========
This extension adds a capability for clients to apply on-the-fly
compression on seeded pieces (next - chunks), effectively improving
bandwidth on torrents for clients supporting it.

Rationale
=========
This extension would allow clients to download files faster, without
using file archivers. Since large files are often precompressed before
torrent creation, downloaders needs to keep both the archives
(for seeding) and uncompresed files (for own usage).

Most users prefer to remove such torrents, thus harming proper file
distribution. For example: Organizations using bittorrent for software
distribution needs to have centralized storage for new customers, no
matter how many customers already have same software.

Extension header
================

This extension uses the extension protocol (specified in `BEP 0010`_)
to advertize client capability of using chunk compression. It defines
following items in the extension protocol handshake message:
+-------+-----------------------------------------------------------+
| name  | description                                               |
+=======+===========================================================+
| c     | Dictionary of supported compression algorithm which maps  |
|       | its identifiers to its priority (unsigned 8-bit integer), |
|       | clients can adjust it based on compression speed/ratio,   |
|       | hardware support, performance and power mode, et cetera.  |
|       | Priority set to zero means that the compression algorithm |
|       | is not supported or disabled by user, The client should   |
|       | ignore any algorithms it doesn't recognize/malformed.     |
+-------+-----------------------------------------------------------+
| cp    | Optional field with prefered compression algorithm.       |
|       | If client supports that algorithm and it's not disabled,  |
|       | then it must expect to recieve pieces compressed by that  |
|       | specified algorithm.                                      |
+-------+-----------------------------------------------------------+



Compression algorithm is selected by taking dictionary item with highest
priority from intersection of items supported by both peers, if there
isn't any suitable compression algorithm - compression will be disabled.

Example of extension handshake message:

::

    {
		'c': {
			'lz4': 21,
			'density_chameleon': 18,
			'density_cheetah': 13,
			'density_lion': 9,
			'zstd': 0
		},
		'cp': 'lz4'
	}


Piece compression
=================
Some algorithms can't compress unreasonably small pieces efficiently, so
client should lower algorithm's priority during handshake, depending on
expected compression ratio for defined piece size (down to zero in worst case).
After compression algorithm is negotiated, next pieces are sent compressed.

If client is caching seeding/recieved pieces in memory, then pieces should
be stored compressed, decompressing when saving to disk or sending to peer
which not supports that compression. To avoid re-compression pieces when
sending, client can specify ``cp`` field during handshake.

Allowed compression algorithms
------------------------------

Compression algorithms must satisfy following requirements:

1. Decompression speed must not be lower than 1000MB/s.

2. It must not produce larger piece than original by 1%.

+-------------+-----------------------------------------------------+
| identifier  | compression algorithm                               |
+=============+=====================================================+
| lz4         | LZ4                                                 |
+-------------+-----------------------------------------------------+
| lz4_hc      | High compression derivative of LZ4                  |
+-------------+-----------------------------------------------------+
| d_chameleon | Chameleon algorithm for DENSITY                     |
+-------------+-----------------------------------------------------+
| d_cheetah   | Cheetah algorithm for DENSITY                       |
+-------------+-----------------------------------------------------+
| d_lion      | Lion algorithm for DENSITY                          |
+-------------+-----------------------------------------------------+

WARNING: Table is for demonstration purposes only, since this is a draft.

References
==========

.. _`BEP 0010`: http://www.bittorrent.org/beps/bep_0010.html


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
