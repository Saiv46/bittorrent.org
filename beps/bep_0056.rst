:BEP: 56
:Title: Data compression extension
:Version: $Revision$
:Last-Modified: $Date$
:Author:  Alexander Ivanov <saiv46@yandex.ru>
:Status:  Draft
:Type:    Standards Track
:Created: 31-Sep-2021
:Post-History: 

Data compression extension adds a capability for clients to negotiate
and use compression algorithms to improve bandwidth.


Rationale
=========
This extension would allow clients to download files faster, without
using file archivers. Since large files are often pre-compressed before
torrent creation, downloaders needs to keep both the archives
(for seeding) and uncompressed files (for own usage).

Most users prefer to remove such torrents, thus harming proper file
distribution. For example: Organizations using Bittorrent for software
distribution needs to have centralized storage for new customers, no
matter how many customers have the same software already.


Compression modes
===================
Extension provides two approaches (modes) to compression, which have
their own trade-offs, so choice between these should be made by clients
on per-torrent basis, using its metadata (properties like piece size).

With **by-piece compression** mode, client must compress each piece
individually, which lowers overall compression ratio but result can
be stored in cache and reused, probably providing more efficiency.
If the client is caching compressed pieces in memory, then it can be
decompressed when saving to disk or sending to peer, which not supports
compression. To reduce piece re-compression, client should raise
current algorithm's priority during handshake. This method has low
efficiency with pieces smaller than 4 MB.

Clients using **stream compression** mode instead compresses whole
data stream, so compression ratio should be higher. During handshake,
clients should lower or raise algorithm's priority depending on expected
factors that could impact compression efficiency and performance. This
method can introduce performance issues if used on thousands of
simultaneous connections.

Allowed compression algorithms
------------------------------

Compression algorithms must satisfy the following requirements:

1. Decompression speed must not be lower than 500 MB/s.

2. It must not produce a larger piece than the original by 1%.

+-------------+-----------------------------+
| identifier  | compression algorithm       |
+=============+=============================+
| lz4         | LZ4                         |
+-------------+-----------------------------+
| density     | Chameleon (DENSITY library) |
+-------------+-----------------------------+
| zstd        | ZStandard                   |
+-------------+-----------------------------+

**NOTE**: Currently, only ``zstd`` algorithm is required for implementation.

References
==========

.. _`BEP 0010`: http://www.bittorrent.org/beps/bep_0010.html


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
